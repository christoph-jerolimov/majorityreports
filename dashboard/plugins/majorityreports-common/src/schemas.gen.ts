// This file is auto-generated by @hey-api/openapi-ts

export const $Actor = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'Actor'
        },
        meta: {
            '$ref': '#/components/schemas/ActorMeta'
        },
        spec: {
            '$ref': '#/components/schemas/ActorSpec'
        }
    },
    type: 'object',
    required: ['meta', 'spec'],
    title: 'Actor'
} as const;

export const $ActorFilter = {
    properties: {
        names: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Names'
        },
        labelSelector: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labelselector'
        }
    },
    type: 'object',
    title: 'ActorFilter'
} as const;

export const $ActorList = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'ActorList'
        },
        meta: {
            '$ref': '#/components/schemas/ListMeta'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/Actor'
            },
            type: 'array',
            title: 'Items'
        }
    },
    type: 'object',
    required: ['meta', 'items'],
    title: 'ActorList'
} as const;

export const $ActorMeta = {
    properties: {
        namespace: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Namespace'
        },
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 63,
                    pattern: '^[a-z0-9]$|^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        generateName: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 57,
                    pattern: '^[a-z0-9]$|^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Generatename'
        },
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels'
        },
        annotations: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Annotations'
        },
        tags: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        },
        importedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Importedtimestamp'
        },
        creationTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Creationtimestamp'
        },
        updatedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedtimestamp'
        },
        deletedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deletedtimestamp'
        }
    },
    type: 'object',
    title: 'ActorMeta'
} as const;

export const $ActorQuery = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'ActorQuery'
        },
        namespace: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Namespace'
        },
        filter: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ActorFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        exclude: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ActorFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        order: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/OrderBy'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Order'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Pagination'
                },
                {
                    type: 'null'
                }
            ],
            default: {
                limit: 10
            }
        }
    },
    type: 'object',
    title: 'ActorQuery'
} as const;

export const $ActorSpec = {
    properties: {
        type: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 63
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type'
        },
        features: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Features'
        }
    },
    type: 'object',
    title: 'ActorSpec'
} as const;

export const $ActorTagsResult = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'ActorTagsResult'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/src__actors__tags__Item'
            },
            type: 'array',
            title: 'Items'
        }
    },
    type: 'object',
    required: ['items'],
    title: 'ActorTagsResult'
} as const;

export const $Event = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'Event'
        },
        meta: {
            '$ref': '#/components/schemas/EventMeta'
        },
        spec: {
            '$ref': '#/components/schemas/EventSpec'
        }
    },
    type: 'object',
    required: ['meta', 'spec'],
    title: 'Event'
} as const;

export const $EventFilter = {
    properties: {
        names: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Names'
        },
        labelSelector: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labelselector'
        }
    },
    type: 'object',
    title: 'EventFilter'
} as const;

export const $EventList = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'EventList'
        },
        meta: {
            '$ref': '#/components/schemas/ListMeta'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/Event'
            },
            type: 'array',
            title: 'Items'
        }
    },
    type: 'object',
    required: ['meta', 'items'],
    title: 'EventList'
} as const;

export const $EventMeta = {
    properties: {
        namespace: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Namespace'
        },
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 63,
                    pattern: '^[a-z0-9]$|^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        generateName: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 57,
                    pattern: '^[a-z0-9]$|^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Generatename'
        },
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels'
        },
        annotations: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Annotations'
        },
        tags: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        },
        importedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Importedtimestamp'
        },
        creationTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Creationtimestamp'
        },
        updatedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedtimestamp'
        },
        deletedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deletedtimestamp'
        }
    },
    type: 'object',
    title: 'EventMeta'
} as const;

export const $EventQuery = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'EventQuery'
        },
        namespace: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Namespace'
        },
        filter: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EventFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        exclude: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EventFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        order: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/OrderBy'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Order'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Pagination'
                },
                {
                    type: 'null'
                }
            ],
            default: {
                limit: 10
            }
        }
    },
    type: 'object',
    title: 'EventQuery'
} as const;

export const $EventSpec = {
    properties: {
        type: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 63
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type'
        },
        actor: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Actor'
        },
        item: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Item'
        },
        value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value'
        }
    },
    type: 'object',
    title: 'EventSpec'
} as const;

export const $EventTagsResult = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'EventTagsResult'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/src__events__tags__Item'
            },
            type: 'array',
            title: 'Items'
        }
    },
    type: 'object',
    required: ['items'],
    title: 'EventTagsResult'
} as const;

export const $Feedback = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'Feedback'
        },
        meta: {
            '$ref': '#/components/schemas/FeedbackMeta'
        },
        spec: {
            '$ref': '#/components/schemas/FeedbackSpec'
        }
    },
    type: 'object',
    required: ['meta', 'spec'],
    title: 'Feedback'
} as const;

export const $FeedbackFilter = {
    properties: {
        names: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Names'
        },
        labelSelector: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labelselector'
        }
    },
    type: 'object',
    title: 'FeedbackFilter'
} as const;

export const $FeedbackList = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'FeedbackList'
        },
        meta: {
            '$ref': '#/components/schemas/ListMeta'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/Feedback'
            },
            type: 'array',
            title: 'Items'
        }
    },
    type: 'object',
    required: ['meta', 'items'],
    title: 'FeedbackList'
} as const;

export const $FeedbackMeta = {
    properties: {
        namespace: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Namespace'
        },
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 63,
                    pattern: '^[a-z0-9]$|^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        generateName: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 57,
                    pattern: '^[a-z0-9]$|^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Generatename'
        },
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels'
        },
        annotations: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Annotations'
        },
        tags: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        },
        importedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Importedtimestamp'
        },
        creationTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Creationtimestamp'
        },
        updatedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedtimestamp'
        },
        deletedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deletedtimestamp'
        }
    },
    type: 'object',
    title: 'FeedbackMeta'
} as const;

export const $FeedbackQuery = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'FeedbackQuery'
        },
        namespace: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Namespace'
        },
        filter: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FeedbackFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        exclude: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FeedbackFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        order: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/OrderBy'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Order'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Pagination'
                },
                {
                    type: 'null'
                }
            ],
            default: {
                limit: 10
            }
        }
    },
    type: 'object',
    title: 'FeedbackQuery'
} as const;

export const $FeedbackSpec = {
    properties: {
        type: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 63
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type'
        },
        actor: {
            type: 'string',
            title: 'Actor'
        },
        item: {
            type: 'string',
            title: 'Item'
        },
        value: {
            type: 'string',
            title: 'Value'
        }
    },
    type: 'object',
    required: ['actor', 'item', 'value'],
    title: 'FeedbackSpec'
} as const;

export const $FeedbackTagsResult = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'FeedbackTagsResult'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/src__feedbacks__tags__Item'
            },
            type: 'array',
            title: 'Items'
        }
    },
    type: 'object',
    required: ['items'],
    title: 'FeedbackTagsResult'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $Item_Input = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'Item'
        },
        meta: {
            '$ref': '#/components/schemas/ItemMeta'
        },
        spec: {
            '$ref': '#/components/schemas/ItemSpec'
        }
    },
    type: 'object',
    required: ['meta', 'spec'],
    title: 'Item'
} as const;

export const $ItemEntity = {
    properties: {
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        namespace: {
            type: 'string',
            title: 'Namespace'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels'
        },
        annotations: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Annotations'
        },
        tags: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        },
        importedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Importedtimestamp'
        },
        creationTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Creationtimestamp'
        },
        updatedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedtimestamp'
        },
        deletedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deletedtimestamp'
        },
        type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type'
        },
        features: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Features'
        }
    },
    type: 'object',
    required: ['namespace', 'name', 'labels', 'annotations', 'tags', 'importedTimestamp', 'creationTimestamp', 'updatedTimestamp', 'deletedTimestamp', 'type', 'features'],
    title: 'ItemEntity'
} as const;

export const $ItemFilter = {
    properties: {
        names: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Names'
        },
        labelSelector: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labelselector'
        }
    },
    type: 'object',
    title: 'ItemFilter'
} as const;

export const $ItemList = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'ItemList'
        },
        meta: {
            '$ref': '#/components/schemas/ListMeta'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/src__items__types__Item'
            },
            type: 'array',
            title: 'Items'
        }
    },
    type: 'object',
    required: ['meta', 'items'],
    title: 'ItemList'
} as const;

export const $ItemMeta = {
    properties: {
        namespace: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Namespace'
        },
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 63,
                    pattern: '^[a-z0-9]$|^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        generateName: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 57,
                    pattern: '^[a-z0-9]$|^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Generatename'
        },
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels'
        },
        annotations: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Annotations'
        },
        tags: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        },
        importedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Importedtimestamp'
        },
        creationTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Creationtimestamp'
        },
        updatedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedtimestamp'
        },
        deletedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deletedtimestamp'
        }
    },
    type: 'object',
    title: 'ItemMeta'
} as const;

export const $ItemMinMax = {
    properties: {
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        namespace_name: {
            type: 'string',
            title: 'Namespace Name'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        creationTimestamp: {
            type: 'string',
            format: 'date-time',
            title: 'Creationtimestamp'
        },
        updatedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedtimestamp'
        },
        labels: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Labels'
        },
        annotations: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Annotations'
        },
        count: {
            type: 'integer',
            title: 'Count'
        },
        min: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Min'
        },
        max: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max'
        }
    },
    type: 'object',
    required: ['uid', 'namespace_name', 'name', 'creationTimestamp', 'updatedTimestamp', 'labels', 'annotations', 'count', 'min', 'max'],
    title: 'ItemMinMax'
} as const;

export const $ItemQuery = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'ItemQuery'
        },
        namespace: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Namespace'
        },
        filter: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ItemFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        exclude: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ItemFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        order: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/OrderBy'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Order'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Pagination'
                },
                {
                    type: 'null'
                }
            ],
            default: {
                limit: 10
            }
        }
    },
    type: 'object',
    title: 'ItemQuery'
} as const;

export const $ItemSpec = {
    properties: {
        type: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 63
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type'
        },
        features: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Features'
        }
    },
    type: 'object',
    title: 'ItemSpec'
} as const;

export const $ItemTagsResult = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'ItemTagsResult'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/src__items__tags__Item'
            },
            type: 'array',
            title: 'Items'
        }
    },
    type: 'object',
    required: ['items'],
    title: 'ItemTagsResult'
} as const;

export const $ItemWithEventCount = {
    properties: {
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        namespace_name: {
            type: 'string',
            title: 'Namespace Name'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        creationTimestamp: {
            type: 'string',
            format: 'date-time',
            title: 'Creationtimestamp'
        },
        updatedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedtimestamp'
        },
        labels: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Labels'
        },
        annotations: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Annotations'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['uid', 'namespace_name', 'name', 'creationTimestamp', 'updatedTimestamp', 'labels', 'annotations', 'count'],
    title: 'ItemWithEventCount'
} as const;

export const $ItemWithEventDetails = {
    properties: {
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        namespace_name: {
            type: 'string',
            title: 'Namespace Name'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        creationTimestamp: {
            type: 'string',
            format: 'date-time',
            title: 'Creationtimestamp'
        },
        updatedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedtimestamp'
        },
        labels: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Labels'
        },
        annotations: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Annotations'
        },
        eventUid: {
            type: 'string',
            format: 'uuid',
            title: 'Eventuid'
        },
        eventName: {
            type: 'string',
            title: 'Eventname'
        },
        eventActor: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eventactor'
        },
        eventCreated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eventcreated'
        },
        eventUpdated: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eventupdated'
        },
        eventLabels: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Eventlabels'
        },
        eventAnnotations: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Eventannotations'
        },
        eventType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eventtype'
        },
        eventValue: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Eventvalue'
        }
    },
    type: 'object',
    required: ['uid', 'namespace_name', 'name', 'creationTimestamp', 'updatedTimestamp', 'labels', 'annotations', 'eventUid', 'eventName', 'eventActor', 'eventCreated', 'eventUpdated', 'eventLabels', 'eventAnnotations', 'eventType', 'eventValue'],
    title: 'ItemWithEventDetails'
} as const;

export const $ItemWithFeedbackCount = {
    properties: {
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        namespace_name: {
            type: 'string',
            title: 'Namespace Name'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        creationTimestamp: {
            type: 'string',
            format: 'date-time',
            title: 'Creationtimestamp'
        },
        updatedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedtimestamp'
        },
        labels: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Labels'
        },
        annotations: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Annotations'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['uid', 'namespace_name', 'name', 'creationTimestamp', 'updatedTimestamp', 'labels', 'annotations', 'count'],
    title: 'ItemWithFeedbackCount'
} as const;

export const $ListMeta = {
    properties: {
        start: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start'
        },
        limit: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Limit'
        },
        itemCount: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Itemcount'
        },
        remainingItemCount: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Remainingitemcount'
        },
        next: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next'
        }
    },
    type: 'object',
    title: 'ListMeta'
} as const;

export const $MinMax = {
    properties: {
        count: {
            type: 'integer',
            title: 'Count'
        },
        min: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Min'
        },
        max: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max'
        }
    },
    type: 'object',
    required: ['count', 'min', 'max'],
    title: 'MinMax'
} as const;

export const $Namespace = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'Namespace'
        },
        meta: {
            '$ref': '#/components/schemas/NamespaceMeta'
        },
        spec: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/NamespaceSpec'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['meta'],
    title: 'Namespace'
} as const;

export const $NamespaceFilter = {
    properties: {
        names: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Names'
        },
        labelSelector: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labelselector'
        }
    },
    type: 'object',
    title: 'NamespaceFilter'
} as const;

export const $NamespaceList = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'NamespaceList'
        },
        meta: {
            '$ref': '#/components/schemas/ListMeta'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/Namespace'
            },
            type: 'array',
            title: 'Items'
        }
    },
    type: 'object',
    required: ['meta', 'items'],
    title: 'NamespaceList'
} as const;

export const $NamespaceMeta = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 63,
                    pattern: '^[a-z0-9]$|^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        generateName: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 57,
                    pattern: '^[a-z0-9]$|^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Generatename'
        },
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        labels: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Labels'
        },
        annotations: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Annotations'
        },
        tags: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        },
        importedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Importedtimestamp'
        },
        creationTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Creationtimestamp'
        },
        updatedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatedtimestamp'
        },
        deletedTimestamp: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deletedtimestamp'
        }
    },
    type: 'object',
    title: 'NamespaceMeta'
} as const;

export const $NamespaceQuery = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'NamespaceQuery'
        },
        filter: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/NamespaceFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        exclude: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/NamespaceFilter'
                },
                {
                    type: 'null'
                }
            ]
        },
        order: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/OrderBy'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Order'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Pagination'
                },
                {
                    type: 'null'
                }
            ],
            default: {
                limit: 10
            }
        }
    },
    type: 'object',
    title: 'NamespaceQuery'
} as const;

export const $NamespaceSpec = {
    properties: {
        lifecycle: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lifecycle'
        },
        owner: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Owner'
        },
        contact: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Contact'
        }
    },
    type: 'object',
    title: 'NamespaceSpec'
} as const;

export const $NamespaceTagsResult = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'NamespaceTagsResult'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/src__namespaces__tags__Item'
            },
            type: 'array',
            title: 'Items'
        }
    },
    type: 'object',
    required: ['items'],
    title: 'NamespaceTagsResult'
} as const;

export const $OrderBy = {
    properties: {
        attribute: {
            type: 'string',
            title: 'Attribute'
        },
        direction: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Direction'
        }
    },
    type: 'object',
    required: ['attribute'],
    title: 'OrderBy'
} as const;

export const $Pagination = {
    properties: {
        start: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start'
        },
        limit: {
            anyOf: [
                {
                    type: 'integer',
                    maximum: 100,
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Limit',
            default: 10
        }
    },
    type: 'object',
    title: 'Pagination'
} as const;

export const $Stats = {
    properties: {
        namespaces: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Namespaces'
        },
        actors: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Actors'
        },
        items: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Items'
        },
        events: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Events'
        },
        feedbacks: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Feedbacks'
        }
    },
    type: 'object',
    title: 'Stats'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const $src__actors__tags__Item = {
    properties: {
        value: {
            type: 'string',
            title: 'Value'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['value', 'count'],
    title: 'Item'
} as const;

export const $src__events__tags__Item = {
    properties: {
        value: {
            type: 'string',
            title: 'Value'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['value', 'count'],
    title: 'Item'
} as const;

export const $src__feedbacks__tags__Item = {
    properties: {
        value: {
            type: 'string',
            title: 'Value'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['value', 'count'],
    title: 'Item'
} as const;

export const $src__items__tags__Item = {
    properties: {
        value: {
            type: 'string',
            title: 'Value'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['value', 'count'],
    title: 'Item'
} as const;

export const $src__items__types__Item = {
    properties: {
        apiVersion: {
            type: 'string',
            title: 'Apiversion',
            default: 'v1alpha1'
        },
        kind: {
            type: 'string',
            title: 'Kind',
            default: 'Item'
        },
        meta: {
            '$ref': '#/components/schemas/ItemMeta'
        },
        spec: {
            '$ref': '#/components/schemas/ItemSpec'
        }
    },
    type: 'object',
    required: ['meta', 'spec'],
    title: 'Item'
} as const;

export const $src__namespaces__tags__Item = {
    properties: {
        value: {
            type: 'string',
            title: 'Value'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['value', 'count'],
    title: 'Item'
} as const;