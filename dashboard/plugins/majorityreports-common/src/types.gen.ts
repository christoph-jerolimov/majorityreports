// This file is auto-generated by @hey-api/openapi-ts

export type Actor = {
    uid?: string;
    namespace_name: string;
    name: string;
    creationTimestamp: string | null;
    updateTimestamp: string | null;
    labels?: {
        [key: string]: (string);
    };
    annotations?: {
        [key: string]: (string);
    };
};

export type ActorsResult = {
    count?: number | null;
    items?: Array<Actor> | null;
};

export type Event = {
    uid?: string;
    namespace_name: string;
    name: string;
    actor_name: string | null;
    item_name: string | null;
    creationTimestamp: string | null;
    updateTimestamp: string | null;
    labels?: {
        [key: string]: (string);
    };
    annotations?: {
        [key: string]: (string);
    };
    type: string | null;
    value: string | null;
};

export type EventsResult = {
    count?: number | null;
    items?: Array<Event> | null;
};

export type Feedback = {
    uid?: string;
    namespace_name: string;
    name: string;
    actor_name: string;
    item_name: string;
    creationTimestamp: string | null;
    updateTimestamp: string | null;
    labels?: {
        [key: string]: (string);
    };
    annotations?: {
        [key: string]: (string);
    };
    type: string | null;
    value: string;
};

export type FeedbacksResult = {
    count?: number | null;
    items?: Array<Feedback> | null;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Item = {
    uid?: string;
    namespace_name: string;
    name: string;
    creationTimestamp: string | null;
    updateTimestamp: string | null;
    labels?: {
        [key: string]: (string);
    };
    annotations?: {
        [key: string]: (string);
    };
};

export type ItemMinMax = {
    uid: string;
    namespace_name: string;
    name: string;
    creationTimestamp: string;
    updateTimestamp: string | null;
    labels: {
        [key: string]: (string);
    };
    annotations: {
        [key: string]: (string);
    };
    count: number;
    min: string | null;
    max: string | null;
};

export type ItemWithEventCount = {
    uid: string;
    namespace_name: string;
    name: string;
    creationTimestamp: string;
    updateTimestamp: string | null;
    labels: {
        [key: string]: (string);
    };
    annotations: {
        [key: string]: (string);
    };
    count: number;
};

export type ItemWithEventDetails = {
    uid: string;
    namespace_name: string;
    name: string;
    creationTimestamp: string;
    updateTimestamp: string | null;
    labels: {
        [key: string]: (string);
    };
    annotations: {
        [key: string]: (string);
    };
    eventUid: string;
    eventName: string;
    eventActor: string | null;
    eventCreated: string | null;
    eventUpdated: string | null;
    eventLabels: {
        [key: string]: (string);
    };
    eventAnnotations: {
        [key: string]: (string);
    };
    eventType: string | null;
    eventValue: string | null;
};

export type ItemWithFeedbackCount = {
    uid: string;
    namespace_name: string;
    name: string;
    creationTimestamp: string;
    updateTimestamp: string | null;
    labels: {
        [key: string]: (string);
    };
    annotations: {
        [key: string]: (string);
    };
    count: number;
};

export type ItemsResult = {
    count?: number | null;
    items?: Array<Item> | null;
};

export type MinMax = {
    count: number;
    min: string | null;
    max: string | null;
};

export type Namespace = {
    uid?: string;
    name: string;
    creationTimestamp: string | null;
    updateTimestamp: string | null;
    labels?: {
        [key: string]: (string);
    };
    annotations?: {
        [key: string]: (string);
    };
};

export type NamespacesResult = {
    count?: number | null;
    items?: Array<Namespace> | null;
};

export type Stats = {
    namespaces?: number | null;
    actors?: number | null;
    items?: number | null;
    events?: number | null;
    feedbacks?: number | null;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type CreateNamespaceApiNamespacesPostData = {
    body: Namespace;
};

export type CreateNamespaceApiNamespacesPostResponse = Namespace;

export type CreateNamespaceApiNamespacesPostError = HTTPValidationError;

export type ReadNamespacesApiNamespacesGetData = {
    query?: {
        limit?: number;
        offset?: number;
    };
};

export type ReadNamespacesApiNamespacesGetResponse = NamespacesResult;

export type ReadNamespacesApiNamespacesGetError = HTTPValidationError;

export type ReadLatestNamespacesApiNamespacesLatestGetData = {
    query?: {
        limit?: number;
    };
};

export type ReadLatestNamespacesApiNamespacesLatestGetResponse = Array<Namespace>;

export type ReadLatestNamespacesApiNamespacesLatestGetError = HTTPValidationError;

export type ReadNamespaceApiNamespacesNamespaceNameGetData = {
    path: {
        namespace_name: string;
    };
};

export type ReadNamespaceApiNamespacesNamespaceNameGetResponse = Namespace;

export type ReadNamespaceApiNamespacesNamespaceNameGetError = HTTPValidationError;

export type UpdateNamespaceApiNamespacesNamespaceNamePutData = {
    body: Namespace;
    path: {
        namespace_name: string;
    };
};

export type UpdateNamespaceApiNamespacesNamespaceNamePutResponse = Namespace;

export type UpdateNamespaceApiNamespacesNamespaceNamePutError = HTTPValidationError;

export type DeleteNamespaceApiNamespacesNamespaceNameDeleteData = {
    path: {
        namespace_name: string;
    };
};

export type DeleteNamespaceApiNamespacesNamespaceNameDeleteResponse = unknown;

export type DeleteNamespaceApiNamespacesNamespaceNameDeleteError = HTTPValidationError;

export type CreateActorApiActorsPostData = {
    body: Actor;
    query: {
        namespace_name: string;
    };
};

export type CreateActorApiActorsPostResponse = Actor;

export type CreateActorApiActorsPostError = HTTPValidationError;

export type ReadActorsApiActorsGetData = {
    query?: {
        limit?: number;
        namespace_name?: string | null;
        offset?: number;
    };
};

export type ReadActorsApiActorsGetResponse = ActorsResult;

export type ReadActorsApiActorsGetError = HTTPValidationError;

export type ReadLatestActorsApiActorsLatestGetData = {
    query?: {
        limit?: number;
        namespace_name?: string | null;
        offset?: number;
    };
};

export type ReadLatestActorsApiActorsLatestGetResponse = Array<Actor>;

export type ReadLatestActorsApiActorsLatestGetError = HTTPValidationError;

export type ReadActorApiActorsActorNameGetData = {
    path: {
        actor_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type ReadActorApiActorsActorNameGetResponse = Actor;

export type ReadActorApiActorsActorNameGetError = HTTPValidationError;

export type UpdateActorApiActorsActorNamePutData = {
    body: Actor;
    path: {
        actor_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type UpdateActorApiActorsActorNamePutResponse = Actor;

export type UpdateActorApiActorsActorNamePutError = HTTPValidationError;

export type DeleteActorApiActorsActorNameDeleteData = {
    path: {
        actor_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type DeleteActorApiActorsActorNameDeleteResponse = unknown;

export type DeleteActorApiActorsActorNameDeleteError = HTTPValidationError;

export type CreateItemApiItemsPostData = {
    body: Item;
    query: {
        namespace_name: string;
    };
};

export type CreateItemApiItemsPostResponse = Item;

export type CreateItemApiItemsPostError = HTTPValidationError;

export type ReadItemsApiItemsGetData = {
    query?: {
        limit?: number;
        namespace_name?: string | null;
        offset?: number;
    };
};

export type ReadItemsApiItemsGetResponse = ItemsResult;

export type ReadItemsApiItemsGetError = HTTPValidationError;

export type ReadLatestItemsApiItemsLatestGetData = {
    query?: {
        limit?: number;
        namespace_name?: string | null;
    };
};

export type ReadLatestItemsApiItemsLatestGetResponse = Array<Item>;

export type ReadLatestItemsApiItemsLatestGetError = HTTPValidationError;

export type ReadItemApiItemsItemNameGetData = {
    path: {
        item_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type ReadItemApiItemsItemNameGetResponse = Item;

export type ReadItemApiItemsItemNameGetError = HTTPValidationError;

export type UpdateItemApiItemsItemNamePutData = {
    body: Item;
    path: {
        item_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type UpdateItemApiItemsItemNamePutResponse = Item;

export type UpdateItemApiItemsItemNamePutError = HTTPValidationError;

export type DeleteItemApiItemsItemNameDeleteData = {
    path: {
        item_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type DeleteItemApiItemsItemNameDeleteResponse = unknown;

export type DeleteItemApiItemsItemNameDeleteError = HTTPValidationError;

export type CreateEventApiEventsPostData = {
    body: Event;
    query: {
        namespace_name: string;
    };
};

export type CreateEventApiEventsPostResponse = Event;

export type CreateEventApiEventsPostError = HTTPValidationError;

export type ReadEventsApiEventsGetData = {
    query?: {
        limit?: number;
        namespace_name?: string | null;
        offset?: number;
    };
};

export type ReadEventsApiEventsGetResponse = EventsResult;

export type ReadEventsApiEventsGetError = HTTPValidationError;

export type ReadLatestEventsApiEventsLatestGetData = {
    query?: {
        limit?: number;
        namespace_name?: string | null;
        type_filter?: string | null;
    };
};

export type ReadLatestEventsApiEventsLatestGetResponse = Array<Event>;

export type ReadLatestEventsApiEventsLatestGetError = HTTPValidationError;

export type ReadEventApiEventsEventNameGetData = {
    path: {
        event_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type ReadEventApiEventsEventNameGetResponse = Event;

export type ReadEventApiEventsEventNameGetError = HTTPValidationError;

export type UpdateEventApiEventsEventNamePutData = {
    body: Event;
    path: {
        event_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type UpdateEventApiEventsEventNamePutResponse = Event;

export type UpdateEventApiEventsEventNamePutError = HTTPValidationError;

export type DeleteEventApiEventsEventNameDeleteData = {
    path: {
        event_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type DeleteEventApiEventsEventNameDeleteResponse = unknown;

export type DeleteEventApiEventsEventNameDeleteError = HTTPValidationError;

export type CreateFeedbackApiFeedbacksPostData = {
    body: Feedback;
    query: {
        namespace_name: string;
    };
};

export type CreateFeedbackApiFeedbacksPostResponse = Feedback;

export type CreateFeedbackApiFeedbacksPostError = HTTPValidationError;

export type ReadFeedbacksApiFeedbacksGetData = {
    query?: {
        limit?: number;
        namespace_name?: string | null;
        offset?: number;
    };
};

export type ReadFeedbacksApiFeedbacksGetResponse = FeedbacksResult;

export type ReadFeedbacksApiFeedbacksGetError = HTTPValidationError;

export type ReadLatestFeedbacksApiFeedbacksLatestGetData = {
    query?: {
        limit?: number;
        namespace_name?: string | null;
        type_filter?: string | null;
    };
};

export type ReadLatestFeedbacksApiFeedbacksLatestGetResponse = Array<Feedback>;

export type ReadLatestFeedbacksApiFeedbacksLatestGetError = HTTPValidationError;

export type ReadFeedbackApiFeedbacksFeedbackIdGetData = {
    query: {
        feedback_name: string;
        namespace_name: string;
    };
};

export type ReadFeedbackApiFeedbacksFeedbackIdGetResponse = Feedback;

export type ReadFeedbackApiFeedbacksFeedbackIdGetError = HTTPValidationError;

export type UpdateFeedbackApiFeedbacksFeedbackIdPutData = {
    body: Feedback;
    query: {
        feedback_name: string;
        namespace_name: string;
    };
};

export type UpdateFeedbackApiFeedbacksFeedbackIdPutResponse = Feedback;

export type UpdateFeedbackApiFeedbacksFeedbackIdPutError = HTTPValidationError;

export type DeleteFeedbackApiFeedbacksFeedbackIdDeleteData = {
    query: {
        feedback_name: string;
        namespace_name: string;
    };
};

export type DeleteFeedbackApiFeedbacksFeedbackIdDeleteResponse = unknown;

export type DeleteFeedbackApiFeedbacksFeedbackIdDeleteError = HTTPValidationError;

export type GetStatsApiStatsGetData = {
    query?: {
        namespace_name?: string | null;
    };
};

export type GetStatsApiStatsGetResponse = Stats;

export type GetStatsApiStatsGetError = HTTPValidationError;

export type CreateActorApiNamespaceNamespaceNameActorsPostData = {
    body: Actor;
    path: {
        namespace_name: string;
    };
};

export type CreateActorApiNamespaceNamespaceNameActorsPostResponse = Actor;

export type CreateActorApiNamespaceNamespaceNameActorsPostError = HTTPValidationError;

export type ReadActorsApiNamespaceNamespaceNameActorsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        offset?: number;
    };
};

export type ReadActorsApiNamespaceNamespaceNameActorsGetResponse = ActorsResult;

export type ReadActorsApiNamespaceNamespaceNameActorsGetError = HTTPValidationError;

export type ReadLatestActorsApiNamespaceNamespaceNameActorsLatestGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        offset?: number;
    };
};

export type ReadLatestActorsApiNamespaceNamespaceNameActorsLatestGetResponse = Array<Actor>;

export type ReadLatestActorsApiNamespaceNamespaceNameActorsLatestGetError = HTTPValidationError;

export type ReadActorApiNamespaceNamespaceNameActorsActorNameGetData = {
    path: {
        actor_name: string;
        namespace_name: string;
    };
};

export type ReadActorApiNamespaceNamespaceNameActorsActorNameGetResponse = Actor;

export type ReadActorApiNamespaceNamespaceNameActorsActorNameGetError = HTTPValidationError;

export type UpdateActorApiNamespaceNamespaceNameActorsActorNamePutData = {
    body: Actor;
    path: {
        actor_name: string;
        namespace_name: string;
    };
};

export type UpdateActorApiNamespaceNamespaceNameActorsActorNamePutResponse = Actor;

export type UpdateActorApiNamespaceNamespaceNameActorsActorNamePutError = HTTPValidationError;

export type DeleteActorApiNamespaceNamespaceNameActorsActorNameDeleteData = {
    path: {
        actor_name: string;
        namespace_name: string;
    };
};

export type DeleteActorApiNamespaceNamespaceNameActorsActorNameDeleteResponse = unknown;

export type DeleteActorApiNamespaceNamespaceNameActorsActorNameDeleteError = HTTPValidationError;

export type CreateItemApiNamespaceNamespaceNameItemsPostData = {
    body: Item;
    path: {
        namespace_name: string;
    };
};

export type CreateItemApiNamespaceNamespaceNameItemsPostResponse = Item;

export type CreateItemApiNamespaceNamespaceNameItemsPostError = HTTPValidationError;

export type ReadItemsApiNamespaceNamespaceNameItemsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        offset?: number;
    };
};

export type ReadItemsApiNamespaceNamespaceNameItemsGetResponse = ItemsResult;

export type ReadItemsApiNamespaceNamespaceNameItemsGetError = HTTPValidationError;

export type ReadLatestItemsApiNamespaceNamespaceNameItemsLatestGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
    };
};

export type ReadLatestItemsApiNamespaceNamespaceNameItemsLatestGetResponse = Array<Item>;

export type ReadLatestItemsApiNamespaceNamespaceNameItemsLatestGetError = HTTPValidationError;

export type ReadItemApiNamespaceNamespaceNameItemsItemNameGetData = {
    path: {
        item_name: string;
        namespace_name: string;
    };
};

export type ReadItemApiNamespaceNamespaceNameItemsItemNameGetResponse = Item;

export type ReadItemApiNamespaceNamespaceNameItemsItemNameGetError = HTTPValidationError;

export type UpdateItemApiNamespaceNamespaceNameItemsItemNamePutData = {
    body: Item;
    path: {
        item_name: string;
        namespace_name: string;
    };
};

export type UpdateItemApiNamespaceNamespaceNameItemsItemNamePutResponse = Item;

export type UpdateItemApiNamespaceNamespaceNameItemsItemNamePutError = HTTPValidationError;

export type DeleteItemApiNamespaceNamespaceNameItemsItemNameDeleteData = {
    path: {
        item_name: string;
        namespace_name: string;
    };
};

export type DeleteItemApiNamespaceNamespaceNameItemsItemNameDeleteResponse = unknown;

export type DeleteItemApiNamespaceNamespaceNameItemsItemNameDeleteError = HTTPValidationError;

export type CreateEventApiNamespaceNamespaceNameEventsPostData = {
    body: Event;
    path: {
        namespace_name: string;
    };
};

export type CreateEventApiNamespaceNamespaceNameEventsPostResponse = Event;

export type CreateEventApiNamespaceNamespaceNameEventsPostError = HTTPValidationError;

export type ReadEventsApiNamespaceNamespaceNameEventsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        offset?: number;
    };
};

export type ReadEventsApiNamespaceNamespaceNameEventsGetResponse = EventsResult;

export type ReadEventsApiNamespaceNamespaceNameEventsGetError = HTTPValidationError;

export type ReadLatestEventsApiNamespaceNamespaceNameEventsLatestGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        type_filter?: string | null;
    };
};

export type ReadLatestEventsApiNamespaceNamespaceNameEventsLatestGetResponse = Array<Event>;

export type ReadLatestEventsApiNamespaceNamespaceNameEventsLatestGetError = HTTPValidationError;

export type ReadEventApiNamespaceNamespaceNameEventsEventNameGetData = {
    path: {
        event_name: string;
        namespace_name: string;
    };
};

export type ReadEventApiNamespaceNamespaceNameEventsEventNameGetResponse = Event;

export type ReadEventApiNamespaceNamespaceNameEventsEventNameGetError = HTTPValidationError;

export type UpdateEventApiNamespaceNamespaceNameEventsEventNamePutData = {
    body: Event;
    path: {
        event_name: string;
        namespace_name: string;
    };
};

export type UpdateEventApiNamespaceNamespaceNameEventsEventNamePutResponse = Event;

export type UpdateEventApiNamespaceNamespaceNameEventsEventNamePutError = HTTPValidationError;

export type DeleteEventApiNamespaceNamespaceNameEventsEventNameDeleteData = {
    path: {
        event_name: string;
        namespace_name: string;
    };
};

export type DeleteEventApiNamespaceNamespaceNameEventsEventNameDeleteResponse = unknown;

export type DeleteEventApiNamespaceNamespaceNameEventsEventNameDeleteError = HTTPValidationError;

export type CreateFeedbackApiNamespaceNamespaceNameFeedbacksPostData = {
    body: Feedback;
    path: {
        namespace_name: string;
    };
};

export type CreateFeedbackApiNamespaceNamespaceNameFeedbacksPostResponse = Feedback;

export type CreateFeedbackApiNamespaceNamespaceNameFeedbacksPostError = HTTPValidationError;

export type ReadFeedbacksApiNamespaceNamespaceNameFeedbacksGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        offset?: number;
    };
};

export type ReadFeedbacksApiNamespaceNamespaceNameFeedbacksGetResponse = FeedbacksResult;

export type ReadFeedbacksApiNamespaceNamespaceNameFeedbacksGetError = HTTPValidationError;

export type ReadLatestFeedbacksApiNamespaceNamespaceNameFeedbacksLatestGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        type_filter?: string | null;
    };
};

export type ReadLatestFeedbacksApiNamespaceNamespaceNameFeedbacksLatestGetResponse = Array<Feedback>;

export type ReadLatestFeedbacksApiNamespaceNamespaceNameFeedbacksLatestGetError = HTTPValidationError;

export type ReadFeedbackApiNamespaceNamespaceNameFeedbacksFeedbackIdGetData = {
    path: {
        namespace_name: string;
    };
    query: {
        feedback_name: string;
    };
};

export type ReadFeedbackApiNamespaceNamespaceNameFeedbacksFeedbackIdGetResponse = Feedback;

export type ReadFeedbackApiNamespaceNamespaceNameFeedbacksFeedbackIdGetError = HTTPValidationError;

export type UpdateFeedbackApiNamespaceNamespaceNameFeedbacksFeedbackIdPutData = {
    body: Feedback;
    path: {
        namespace_name: string;
    };
    query: {
        feedback_name: string;
    };
};

export type UpdateFeedbackApiNamespaceNamespaceNameFeedbacksFeedbackIdPutResponse = Feedback;

export type UpdateFeedbackApiNamespaceNamespaceNameFeedbacksFeedbackIdPutError = HTTPValidationError;

export type DeleteFeedbackApiNamespaceNamespaceNameFeedbacksFeedbackIdDeleteData = {
    path: {
        namespace_name: string;
    };
    query: {
        feedback_name: string;
    };
};

export type DeleteFeedbackApiNamespaceNamespaceNameFeedbacksFeedbackIdDeleteResponse = unknown;

export type DeleteFeedbackApiNamespaceNamespaceNameFeedbacksFeedbackIdDeleteError = HTTPValidationError;

export type GetStatsApiNamespaceNamespaceNameStatsGetData = {
    path: {
        namespace_name: string | null;
    };
};

export type GetStatsApiNamespaceNamespaceNameStatsGetResponse = Stats;

export type GetStatsApiNamespaceNamespaceNameStatsGetError = HTTPValidationError;

export type GetMinmaxApiNamespaceNamespaceNameReportsAverageMinmaxGetData = {
    path: {
        namespace_name: string;
    };
};

export type GetMinmaxApiNamespaceNamespaceNameReportsAverageMinmaxGetResponse = MinMax;

export type GetMinmaxApiNamespaceNamespaceNameReportsAverageMinmaxGetError = HTTPValidationError;

export type GetItemMinmaxApiNamespaceNamespaceNameReportsAverageItemItemNameGetData = {
    path: {
        item_name: string;
        namespace_name: string;
    };
};

export type GetItemMinmaxApiNamespaceNamespaceNameReportsAverageItemItemNameGetResponse = MinMax;

export type GetItemMinmaxApiNamespaceNamespaceNameReportsAverageItemItemNameGetError = HTTPValidationError;

export type GetAllItemsMinmaxApiNamespaceNamespaceNameReportsAverageItemsGetData = {
    path: {
        namespace_name: string | null;
    };
};

export type GetAllItemsMinmaxApiNamespaceNamespaceNameReportsAverageItemsGetResponse = Array<ItemMinMax>;

export type GetAllItemsMinmaxApiNamespaceNamespaceNameReportsAverageItemsGetError = HTTPValidationError;

export type GetRandomItemApiNamespaceNamespaceNameReportsRandomItemGetData = {
    path: {
        namespace_name: string | null;
    };
};

export type GetRandomItemApiNamespaceNamespaceNameReportsRandomItemGetResponse = Item;

export type GetRandomItemApiNamespaceNamespaceNameReportsRandomItemGetError = HTTPValidationError;

export type GetRandomItemsApiNamespaceNamespaceNameReportsRandomItemsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
    };
};

export type GetRandomItemsApiNamespaceNamespaceNameReportsRandomItemsGetResponse = Array<Item>;

export type GetRandomItemsApiNamespaceNamespaceNameReportsRandomItemsGetError = HTTPValidationError;

export type GetItemsWithMostEventsApiNamespaceNamespaceNameReportsMostEventsItemsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        type_filter?: string | null;
    };
};

export type GetItemsWithMostEventsApiNamespaceNamespaceNameReportsMostEventsItemsGetResponse = Array<ItemWithEventCount>;

export type GetItemsWithMostEventsApiNamespaceNamespaceNameReportsMostEventsItemsGetError = HTTPValidationError;

export type GetItemsWithMostFeedbackApiNamespaceNamespaceNameReportsMostFeedbackItemsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        type_filter?: string | null;
    };
};

export type GetItemsWithMostFeedbackApiNamespaceNamespaceNameReportsMostFeedbackItemsGetResponse = Array<ItemWithFeedbackCount>;

export type GetItemsWithMostFeedbackApiNamespaceNamespaceNameReportsMostFeedbackItemsGetError = HTTPValidationError;

export type GetItemsWithLatestEventsApiNamespaceNamespaceNameReportsLatestEventsItemsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        actor_filter?: string | null;
        limit?: number;
        type_filter?: string | null;
        unique_items?: boolean;
    };
};

export type GetItemsWithLatestEventsApiNamespaceNamespaceNameReportsLatestEventsItemsGetResponse = Array<ItemWithEventDetails>;

export type GetItemsWithLatestEventsApiNamespaceNamespaceNameReportsLatestEventsItemsGetError = HTTPValidationError;

export type $OpenApiTs = {
    '/api/namespaces': {
        post: {
            req: CreateNamespaceApiNamespacesPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Namespace;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadNamespacesApiNamespacesGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': NamespacesResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/latest': {
        get: {
            req: ReadLatestNamespacesApiNamespacesLatestGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<Namespace>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}': {
        get: {
            req: ReadNamespaceApiNamespacesNamespaceNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Namespace;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateNamespaceApiNamespacesNamespaceNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Namespace;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteNamespaceApiNamespacesNamespaceNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/actors': {
        post: {
            req: CreateActorApiActorsPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Actor;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadActorsApiActorsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': ActorsResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/actors/latest': {
        get: {
            req: ReadLatestActorsApiActorsLatestGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<Actor>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/actors/{actor_name}': {
        get: {
            req: ReadActorApiActorsActorNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Actor;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateActorApiActorsActorNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Actor;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteActorApiActorsActorNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/items': {
        post: {
            req: CreateItemApiItemsPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadItemsApiItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': ItemsResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/items/latest': {
        get: {
            req: ReadLatestItemsApiItemsLatestGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<Item>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/items/{item_name}': {
        get: {
            req: ReadItemApiItemsItemNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateItemApiItemsItemNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteItemApiItemsItemNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/events': {
        post: {
            req: CreateEventApiEventsPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Event;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadEventsApiEventsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': EventsResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/events/latest': {
        get: {
            req: ReadLatestEventsApiEventsLatestGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<Event>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/events/{event_name}': {
        get: {
            req: ReadEventApiEventsEventNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Event;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateEventApiEventsEventNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Event;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteEventApiEventsEventNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/feedbacks': {
        post: {
            req: CreateFeedbackApiFeedbacksPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Feedback;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadFeedbacksApiFeedbacksGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': FeedbacksResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/feedbacks/latest': {
        get: {
            req: ReadLatestFeedbacksApiFeedbacksLatestGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<Feedback>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/feedbacks/{feedback_id}': {
        get: {
            req: ReadFeedbackApiFeedbacksFeedbackIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Feedback;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateFeedbackApiFeedbacksFeedbackIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Feedback;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteFeedbackApiFeedbacksFeedbackIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/stats': {
        get: {
            req: GetStatsApiStatsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Stats;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/actors': {
        post: {
            req: CreateActorApiNamespaceNamespaceNameActorsPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Actor;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadActorsApiNamespaceNamespaceNameActorsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': ActorsResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/actors/latest': {
        get: {
            req: ReadLatestActorsApiNamespaceNamespaceNameActorsLatestGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<Actor>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/actors/{actor_name}': {
        get: {
            req: ReadActorApiNamespaceNamespaceNameActorsActorNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Actor;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateActorApiNamespaceNamespaceNameActorsActorNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Actor;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteActorApiNamespaceNamespaceNameActorsActorNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/items': {
        post: {
            req: CreateItemApiNamespaceNamespaceNameItemsPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadItemsApiNamespaceNamespaceNameItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': ItemsResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/items/latest': {
        get: {
            req: ReadLatestItemsApiNamespaceNamespaceNameItemsLatestGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<Item>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/items/{item_name}': {
        get: {
            req: ReadItemApiNamespaceNamespaceNameItemsItemNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateItemApiNamespaceNamespaceNameItemsItemNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteItemApiNamespaceNamespaceNameItemsItemNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/events': {
        post: {
            req: CreateEventApiNamespaceNamespaceNameEventsPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Event;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadEventsApiNamespaceNamespaceNameEventsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': EventsResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/events/latest': {
        get: {
            req: ReadLatestEventsApiNamespaceNamespaceNameEventsLatestGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<Event>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/events/{event_name}': {
        get: {
            req: ReadEventApiNamespaceNamespaceNameEventsEventNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Event;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateEventApiNamespaceNamespaceNameEventsEventNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Event;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteEventApiNamespaceNamespaceNameEventsEventNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/feedbacks': {
        post: {
            req: CreateFeedbackApiNamespaceNamespaceNameFeedbacksPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Feedback;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadFeedbacksApiNamespaceNamespaceNameFeedbacksGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': FeedbacksResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/feedbacks/latest': {
        get: {
            req: ReadLatestFeedbacksApiNamespaceNamespaceNameFeedbacksLatestGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<Feedback>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/feedbacks/{feedback_id}': {
        get: {
            req: ReadFeedbackApiNamespaceNamespaceNameFeedbacksFeedbackIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Feedback;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateFeedbackApiNamespaceNamespaceNameFeedbacksFeedbackIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Feedback;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteFeedbackApiNamespaceNamespaceNameFeedbacksFeedbackIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/stats': {
        get: {
            req: GetStatsApiNamespaceNamespaceNameStatsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Stats;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/reports/average/minmax': {
        get: {
            req: GetMinmaxApiNamespaceNamespaceNameReportsAverageMinmaxGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': MinMax;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/reports/average/item/{item_name}': {
        get: {
            req: GetItemMinmaxApiNamespaceNamespaceNameReportsAverageItemItemNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': MinMax;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/reports/average/items': {
        get: {
            req: GetAllItemsMinmaxApiNamespaceNamespaceNameReportsAverageItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<ItemMinMax>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/reports/random/item': {
        get: {
            req: GetRandomItemApiNamespaceNamespaceNameReportsRandomItemGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/reports/random/items': {
        get: {
            req: GetRandomItemsApiNamespaceNamespaceNameReportsRandomItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<Item>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/reports/most_events/items': {
        get: {
            req: GetItemsWithMostEventsApiNamespaceNamespaceNameReportsMostEventsItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<ItemWithEventCount>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/reports/most_feedback/items': {
        get: {
            req: GetItemsWithMostFeedbackApiNamespaceNamespaceNameReportsMostFeedbackItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<ItemWithFeedbackCount>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespace/{namespace_name}/reports/latest_events/items': {
        get: {
            req: GetItemsWithLatestEventsApiNamespaceNamespaceNameReportsLatestEventsItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<ItemWithEventDetails>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
};