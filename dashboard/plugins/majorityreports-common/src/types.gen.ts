// This file is auto-generated by @hey-api/openapi-ts

export type Actor = {
    uid?: string;
    namespace_name: string;
    name: string;
    creationTimestamp: string | null;
    updateTimestamp: string | null;
    deletedTimestamp: string | null;
    labels?: {
        [key: string]: (string);
    };
    annotations?: {
        [key: string]: (string);
    };
};

export type ActorsResult = {
    count?: number | null;
    items?: Array<Actor> | null;
};

export type Event = {
    uid?: string;
    namespace_name: string;
    name: string;
    actor_name: string | null;
    item_name: string | null;
    creationTimestamp: string | null;
    updateTimestamp: string | null;
    deletedTimestamp: string | null;
    labels?: {
        [key: string]: (string);
    };
    annotations?: {
        [key: string]: (string);
    };
    type: string | null;
    value: string | null;
};

export type EventsResult = {
    count?: number | null;
    items?: Array<Event> | null;
};

export type Feedback = {
    uid?: string;
    namespace_name: string;
    name: string;
    actor_name: string;
    item_name: string;
    creationTimestamp: string | null;
    updateTimestamp: string | null;
    deletedTimestamp: string | null;
    labels?: {
        [key: string]: (string);
    };
    annotations?: {
        [key: string]: (string);
    };
    type: string | null;
    value: string;
};

export type FeedbacksResult = {
    count?: number | null;
    items?: Array<Feedback> | null;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Item = {
    uid?: string;
    namespace_name: string;
    name: string;
    creationTimestamp: string | null;
    updateTimestamp: string | null;
    deletedTimestamp: string | null;
    labels?: {
        [key: string]: (string);
    };
    annotations?: {
        [key: string]: (string);
    };
};

export type ItemMinMax = {
    uid: string;
    namespace_name: string;
    name: string;
    creationTimestamp: string;
    updateTimestamp: string | null;
    labels: {
        [key: string]: (string);
    };
    annotations: {
        [key: string]: (string);
    };
    count: number;
    min: string | null;
    max: string | null;
};

export type ItemWithEventCount = {
    uid: string;
    namespace_name: string;
    name: string;
    creationTimestamp: string;
    updateTimestamp: string | null;
    labels: {
        [key: string]: (string);
    };
    annotations: {
        [key: string]: (string);
    };
    count: number;
};

export type ItemWithEventDetails = {
    uid: string;
    namespace_name: string;
    name: string;
    creationTimestamp: string;
    updateTimestamp: string | null;
    labels: {
        [key: string]: (string);
    };
    annotations: {
        [key: string]: (string);
    };
    eventUid: string;
    eventName: string;
    eventActor: string | null;
    eventCreated: string | null;
    eventUpdated: string | null;
    eventLabels: {
        [key: string]: (string);
    };
    eventAnnotations: {
        [key: string]: (string);
    };
    eventType: string | null;
    eventValue: string | null;
};

export type ItemWithFeedbackCount = {
    uid: string;
    namespace_name: string;
    name: string;
    creationTimestamp: string;
    updateTimestamp: string | null;
    labels: {
        [key: string]: (string);
    };
    annotations: {
        [key: string]: (string);
    };
    count: number;
};

export type ItemsResult = {
    count?: number | null;
    items?: Array<Item> | null;
};

export type MinMax = {
    count: number;
    min: string | null;
    max: string | null;
};

export type Namespace = {
    uid?: string;
    name: string;
    creationTimestamp: string | null;
    updateTimestamp: string | null;
    deletedTimestamp: string | null;
    labels?: {
        [key: string]: (string);
    };
    annotations?: {
        [key: string]: (string);
    };
};

export type NamespacesResult = {
    count?: number | null;
    items?: Array<Namespace> | null;
};

export type Stats = {
    namespaces?: number | null;
    actors?: number | null;
    items?: number | null;
    events?: number | null;
    feedbacks?: number | null;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type CreateNamespaceApiNamespacesPostData = {
    body: Namespace;
};

export type CreateNamespaceApiNamespacesPostResponse = Namespace;

export type CreateNamespaceApiNamespacesPostError = HTTPValidationError;

export type ReadNamespacesApiNamespacesGetData = {
    query?: {
        limit?: number;
        offset?: number;
    };
};

export type ReadNamespacesApiNamespacesGetResponse = NamespacesResult;

export type ReadNamespacesApiNamespacesGetError = HTTPValidationError;

export type ReadNamespaceApiNamespacesNamespaceNameGetData = {
    path: {
        namespace_name: string;
    };
};

export type ReadNamespaceApiNamespacesNamespaceNameGetResponse = Namespace;

export type ReadNamespaceApiNamespacesNamespaceNameGetError = HTTPValidationError;

export type UpdateNamespaceApiNamespacesNamespaceNamePutData = {
    body: Namespace;
    path: {
        namespace_name: string;
    };
};

export type UpdateNamespaceApiNamespacesNamespaceNamePutResponse = Namespace;

export type UpdateNamespaceApiNamespacesNamespaceNamePutError = HTTPValidationError;

export type DeleteNamespaceApiNamespacesNamespaceNameDeleteData = {
    path: {
        namespace_name: string;
    };
};

export type DeleteNamespaceApiNamespacesNamespaceNameDeleteResponse = unknown;

export type DeleteNamespaceApiNamespacesNamespaceNameDeleteError = HTTPValidationError;

export type CreateActorApiActorsPostData = {
    body: Actor;
    query: {
        namespace_name: string;
    };
};

export type CreateActorApiActorsPostResponse = Actor;

export type CreateActorApiActorsPostError = HTTPValidationError;

export type ReadActorsApiActorsGetData = {
    query?: {
        limit?: number;
        namespace_name?: string | null;
        offset?: number;
    };
};

export type ReadActorsApiActorsGetResponse = ActorsResult;

export type ReadActorsApiActorsGetError = HTTPValidationError;

export type ReadActorApiActorsActorNameGetData = {
    path: {
        actor_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type ReadActorApiActorsActorNameGetResponse = Actor;

export type ReadActorApiActorsActorNameGetError = HTTPValidationError;

export type UpdateActorApiActorsActorNamePutData = {
    body: Actor;
    path: {
        actor_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type UpdateActorApiActorsActorNamePutResponse = Actor;

export type UpdateActorApiActorsActorNamePutError = HTTPValidationError;

export type DeleteActorApiActorsActorNameDeleteData = {
    path: {
        actor_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type DeleteActorApiActorsActorNameDeleteResponse = unknown;

export type DeleteActorApiActorsActorNameDeleteError = HTTPValidationError;

export type CreateItemApiItemsPostData = {
    body: Item;
    query: {
        namespace_name: string;
    };
};

export type CreateItemApiItemsPostResponse = Item;

export type CreateItemApiItemsPostError = HTTPValidationError;

export type ReadItemsApiItemsGetData = {
    query?: {
        limit?: number;
        namespace_name?: string | null;
        offset?: number;
    };
};

export type ReadItemsApiItemsGetResponse = ItemsResult;

export type ReadItemsApiItemsGetError = HTTPValidationError;

export type ReadItemApiItemsItemNameGetData = {
    path: {
        item_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type ReadItemApiItemsItemNameGetResponse = Item;

export type ReadItemApiItemsItemNameGetError = HTTPValidationError;

export type UpdateItemApiItemsItemNamePutData = {
    body: Item;
    path: {
        item_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type UpdateItemApiItemsItemNamePutResponse = Item;

export type UpdateItemApiItemsItemNamePutError = HTTPValidationError;

export type DeleteItemApiItemsItemNameDeleteData = {
    path: {
        item_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type DeleteItemApiItemsItemNameDeleteResponse = unknown;

export type DeleteItemApiItemsItemNameDeleteError = HTTPValidationError;

export type CreateEventApiEventsPostData = {
    body: Event;
    query: {
        namespace_name: string;
    };
};

export type CreateEventApiEventsPostResponse = Event;

export type CreateEventApiEventsPostError = HTTPValidationError;

export type ReadEventsApiEventsGetData = {
    query?: {
        limit?: number;
        namespace_name?: string | null;
        offset?: number;
    };
};

export type ReadEventsApiEventsGetResponse = EventsResult;

export type ReadEventsApiEventsGetError = HTTPValidationError;

export type ReadEventApiEventsEventNameGetData = {
    path: {
        event_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type ReadEventApiEventsEventNameGetResponse = Event;

export type ReadEventApiEventsEventNameGetError = HTTPValidationError;

export type UpdateEventApiEventsEventNamePutData = {
    body: Event;
    path: {
        event_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type UpdateEventApiEventsEventNamePutResponse = Event;

export type UpdateEventApiEventsEventNamePutError = HTTPValidationError;

export type DeleteEventApiEventsEventNameDeleteData = {
    path: {
        event_name: string;
    };
    query: {
        namespace_name: string;
    };
};

export type DeleteEventApiEventsEventNameDeleteResponse = unknown;

export type DeleteEventApiEventsEventNameDeleteError = HTTPValidationError;

export type CreateFeedbackApiFeedbacksPostData = {
    body: Feedback;
    query: {
        namespace_name: string;
    };
};

export type CreateFeedbackApiFeedbacksPostResponse = Feedback;

export type CreateFeedbackApiFeedbacksPostError = HTTPValidationError;

export type ReadFeedbacksApiFeedbacksGetData = {
    query?: {
        limit?: number;
        namespace_name?: string | null;
        offset?: number;
    };
};

export type ReadFeedbacksApiFeedbacksGetResponse = FeedbacksResult;

export type ReadFeedbacksApiFeedbacksGetError = HTTPValidationError;

export type ReadFeedbackApiFeedbacksFeedbackIdGetData = {
    query: {
        feedback_name: string;
        namespace_name: string;
    };
};

export type ReadFeedbackApiFeedbacksFeedbackIdGetResponse = Feedback;

export type ReadFeedbackApiFeedbacksFeedbackIdGetError = HTTPValidationError;

export type UpdateFeedbackApiFeedbacksFeedbackIdPutData = {
    body: Feedback;
    query: {
        feedback_name: string;
        namespace_name: string;
    };
};

export type UpdateFeedbackApiFeedbacksFeedbackIdPutResponse = Feedback;

export type UpdateFeedbackApiFeedbacksFeedbackIdPutError = HTTPValidationError;

export type DeleteFeedbackApiFeedbacksFeedbackIdDeleteData = {
    query: {
        feedback_name: string;
        namespace_name: string;
    };
};

export type DeleteFeedbackApiFeedbacksFeedbackIdDeleteResponse = unknown;

export type DeleteFeedbackApiFeedbacksFeedbackIdDeleteError = HTTPValidationError;

export type GetStatsApiStatsGetData = {
    query?: {
        namespace_name?: string | null;
    };
};

export type GetStatsApiStatsGetResponse = Stats;

export type GetStatsApiStatsGetError = HTTPValidationError;

export type CreateActorApiNamespacesNamespaceNameActorsPostData = {
    body: Actor;
    path: {
        namespace_name: string;
    };
};

export type CreateActorApiNamespacesNamespaceNameActorsPostResponse = Actor;

export type CreateActorApiNamespacesNamespaceNameActorsPostError = HTTPValidationError;

export type ReadActorsApiNamespacesNamespaceNameActorsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        offset?: number;
    };
};

export type ReadActorsApiNamespacesNamespaceNameActorsGetResponse = ActorsResult;

export type ReadActorsApiNamespacesNamespaceNameActorsGetError = HTTPValidationError;

export type ReadActorApiNamespacesNamespaceNameActorsActorNameGetData = {
    path: {
        actor_name: string;
        namespace_name: string;
    };
};

export type ReadActorApiNamespacesNamespaceNameActorsActorNameGetResponse = Actor;

export type ReadActorApiNamespacesNamespaceNameActorsActorNameGetError = HTTPValidationError;

export type UpdateActorApiNamespacesNamespaceNameActorsActorNamePutData = {
    body: Actor;
    path: {
        actor_name: string;
        namespace_name: string;
    };
};

export type UpdateActorApiNamespacesNamespaceNameActorsActorNamePutResponse = Actor;

export type UpdateActorApiNamespacesNamespaceNameActorsActorNamePutError = HTTPValidationError;

export type DeleteActorApiNamespacesNamespaceNameActorsActorNameDeleteData = {
    path: {
        actor_name: string;
        namespace_name: string;
    };
};

export type DeleteActorApiNamespacesNamespaceNameActorsActorNameDeleteResponse = unknown;

export type DeleteActorApiNamespacesNamespaceNameActorsActorNameDeleteError = HTTPValidationError;

export type CreateItemApiNamespacesNamespaceNameItemsPostData = {
    body: Item;
    path: {
        namespace_name: string;
    };
};

export type CreateItemApiNamespacesNamespaceNameItemsPostResponse = Item;

export type CreateItemApiNamespacesNamespaceNameItemsPostError = HTTPValidationError;

export type ReadItemsApiNamespacesNamespaceNameItemsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        offset?: number;
    };
};

export type ReadItemsApiNamespacesNamespaceNameItemsGetResponse = ItemsResult;

export type ReadItemsApiNamespacesNamespaceNameItemsGetError = HTTPValidationError;

export type ReadItemApiNamespacesNamespaceNameItemsItemNameGetData = {
    path: {
        item_name: string;
        namespace_name: string;
    };
};

export type ReadItemApiNamespacesNamespaceNameItemsItemNameGetResponse = Item;

export type ReadItemApiNamespacesNamespaceNameItemsItemNameGetError = HTTPValidationError;

export type UpdateItemApiNamespacesNamespaceNameItemsItemNamePutData = {
    body: Item;
    path: {
        item_name: string;
        namespace_name: string;
    };
};

export type UpdateItemApiNamespacesNamespaceNameItemsItemNamePutResponse = Item;

export type UpdateItemApiNamespacesNamespaceNameItemsItemNamePutError = HTTPValidationError;

export type DeleteItemApiNamespacesNamespaceNameItemsItemNameDeleteData = {
    path: {
        item_name: string;
        namespace_name: string;
    };
};

export type DeleteItemApiNamespacesNamespaceNameItemsItemNameDeleteResponse = unknown;

export type DeleteItemApiNamespacesNamespaceNameItemsItemNameDeleteError = HTTPValidationError;

export type CreateEventApiNamespacesNamespaceNameEventsPostData = {
    body: Event;
    path: {
        namespace_name: string;
    };
};

export type CreateEventApiNamespacesNamespaceNameEventsPostResponse = Event;

export type CreateEventApiNamespacesNamespaceNameEventsPostError = HTTPValidationError;

export type ReadEventsApiNamespacesNamespaceNameEventsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        offset?: number;
    };
};

export type ReadEventsApiNamespacesNamespaceNameEventsGetResponse = EventsResult;

export type ReadEventsApiNamespacesNamespaceNameEventsGetError = HTTPValidationError;

export type ReadEventApiNamespacesNamespaceNameEventsEventNameGetData = {
    path: {
        event_name: string;
        namespace_name: string;
    };
};

export type ReadEventApiNamespacesNamespaceNameEventsEventNameGetResponse = Event;

export type ReadEventApiNamespacesNamespaceNameEventsEventNameGetError = HTTPValidationError;

export type UpdateEventApiNamespacesNamespaceNameEventsEventNamePutData = {
    body: Event;
    path: {
        event_name: string;
        namespace_name: string;
    };
};

export type UpdateEventApiNamespacesNamespaceNameEventsEventNamePutResponse = Event;

export type UpdateEventApiNamespacesNamespaceNameEventsEventNamePutError = HTTPValidationError;

export type DeleteEventApiNamespacesNamespaceNameEventsEventNameDeleteData = {
    path: {
        event_name: string;
        namespace_name: string;
    };
};

export type DeleteEventApiNamespacesNamespaceNameEventsEventNameDeleteResponse = unknown;

export type DeleteEventApiNamespacesNamespaceNameEventsEventNameDeleteError = HTTPValidationError;

export type CreateFeedbackApiNamespacesNamespaceNameFeedbacksPostData = {
    body: Feedback;
    path: {
        namespace_name: string;
    };
};

export type CreateFeedbackApiNamespacesNamespaceNameFeedbacksPostResponse = Feedback;

export type CreateFeedbackApiNamespacesNamespaceNameFeedbacksPostError = HTTPValidationError;

export type ReadFeedbacksApiNamespacesNamespaceNameFeedbacksGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        offset?: number;
    };
};

export type ReadFeedbacksApiNamespacesNamespaceNameFeedbacksGetResponse = FeedbacksResult;

export type ReadFeedbacksApiNamespacesNamespaceNameFeedbacksGetError = HTTPValidationError;

export type ReadFeedbackApiNamespacesNamespaceNameFeedbacksFeedbackIdGetData = {
    path: {
        namespace_name: string;
    };
    query: {
        feedback_name: string;
    };
};

export type ReadFeedbackApiNamespacesNamespaceNameFeedbacksFeedbackIdGetResponse = Feedback;

export type ReadFeedbackApiNamespacesNamespaceNameFeedbacksFeedbackIdGetError = HTTPValidationError;

export type UpdateFeedbackApiNamespacesNamespaceNameFeedbacksFeedbackIdPutData = {
    body: Feedback;
    path: {
        namespace_name: string;
    };
    query: {
        feedback_name: string;
    };
};

export type UpdateFeedbackApiNamespacesNamespaceNameFeedbacksFeedbackIdPutResponse = Feedback;

export type UpdateFeedbackApiNamespacesNamespaceNameFeedbacksFeedbackIdPutError = HTTPValidationError;

export type DeleteFeedbackApiNamespacesNamespaceNameFeedbacksFeedbackIdDeleteData = {
    path: {
        namespace_name: string;
    };
    query: {
        feedback_name: string;
    };
};

export type DeleteFeedbackApiNamespacesNamespaceNameFeedbacksFeedbackIdDeleteResponse = unknown;

export type DeleteFeedbackApiNamespacesNamespaceNameFeedbacksFeedbackIdDeleteError = HTTPValidationError;

export type GetStatsApiNamespacesNamespaceNameStatsGetData = {
    path: {
        namespace_name: string | null;
    };
};

export type GetStatsApiNamespacesNamespaceNameStatsGetResponse = Stats;

export type GetStatsApiNamespacesNamespaceNameStatsGetError = HTTPValidationError;

export type GetMinmaxApiNamespacesNamespaceNameReportsAverageMinmaxGetData = {
    path: {
        namespace_name: string;
    };
};

export type GetMinmaxApiNamespacesNamespaceNameReportsAverageMinmaxGetResponse = MinMax;

export type GetMinmaxApiNamespacesNamespaceNameReportsAverageMinmaxGetError = HTTPValidationError;

export type GetItemMinmaxApiNamespacesNamespaceNameReportsAverageItemItemNameGetData = {
    path: {
        item_name: string;
        namespace_name: string;
    };
};

export type GetItemMinmaxApiNamespacesNamespaceNameReportsAverageItemItemNameGetResponse = MinMax;

export type GetItemMinmaxApiNamespacesNamespaceNameReportsAverageItemItemNameGetError = HTTPValidationError;

export type GetAllItemsMinmaxApiNamespacesNamespaceNameReportsAverageItemsGetData = {
    path: {
        namespace_name: string | null;
    };
};

export type GetAllItemsMinmaxApiNamespacesNamespaceNameReportsAverageItemsGetResponse = Array<ItemMinMax>;

export type GetAllItemsMinmaxApiNamespacesNamespaceNameReportsAverageItemsGetError = HTTPValidationError;

export type GetRandomItemApiNamespacesNamespaceNameReportsRandomItemGetData = {
    path: {
        namespace_name: string | null;
    };
};

export type GetRandomItemApiNamespacesNamespaceNameReportsRandomItemGetResponse = Item;

export type GetRandomItemApiNamespacesNamespaceNameReportsRandomItemGetError = HTTPValidationError;

export type GetRandomItemsApiNamespacesNamespaceNameReportsRandomItemsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
    };
};

export type GetRandomItemsApiNamespacesNamespaceNameReportsRandomItemsGetResponse = Array<Item>;

export type GetRandomItemsApiNamespacesNamespaceNameReportsRandomItemsGetError = HTTPValidationError;

export type GetItemsWithMostEventsApiNamespacesNamespaceNameReportsMostEventsItemsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        type_filter?: string | null;
    };
};

export type GetItemsWithMostEventsApiNamespacesNamespaceNameReportsMostEventsItemsGetResponse = Array<ItemWithEventCount>;

export type GetItemsWithMostEventsApiNamespacesNamespaceNameReportsMostEventsItemsGetError = HTTPValidationError;

export type GetItemsWithMostFeedbackApiNamespacesNamespaceNameReportsMostFeedbackItemsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        limit?: number;
        type_filter?: string | null;
    };
};

export type GetItemsWithMostFeedbackApiNamespacesNamespaceNameReportsMostFeedbackItemsGetResponse = Array<ItemWithFeedbackCount>;

export type GetItemsWithMostFeedbackApiNamespacesNamespaceNameReportsMostFeedbackItemsGetError = HTTPValidationError;

export type GetItemsWithLatestEventsApiNamespacesNamespaceNameReportsLatestEventsItemsGetData = {
    path: {
        namespace_name: string | null;
    };
    query?: {
        actor_filter?: string | null;
        limit?: number;
        type_filter?: string | null;
        unique_items?: boolean;
    };
};

export type GetItemsWithLatestEventsApiNamespacesNamespaceNameReportsLatestEventsItemsGetResponse = Array<ItemWithEventDetails>;

export type GetItemsWithLatestEventsApiNamespacesNamespaceNameReportsLatestEventsItemsGetError = HTTPValidationError;

export type $OpenApiTs = {
    '/api/namespaces': {
        post: {
            req: CreateNamespaceApiNamespacesPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Namespace;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadNamespacesApiNamespacesGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': NamespacesResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}': {
        get: {
            req: ReadNamespaceApiNamespacesNamespaceNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Namespace;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateNamespaceApiNamespacesNamespaceNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Namespace;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteNamespaceApiNamespacesNamespaceNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/actors': {
        post: {
            req: CreateActorApiActorsPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Actor;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadActorsApiActorsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': ActorsResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/actors/{actor_name}': {
        get: {
            req: ReadActorApiActorsActorNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Actor;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateActorApiActorsActorNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Actor;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteActorApiActorsActorNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/items': {
        post: {
            req: CreateItemApiItemsPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadItemsApiItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': ItemsResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/items/{item_name}': {
        get: {
            req: ReadItemApiItemsItemNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateItemApiItemsItemNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteItemApiItemsItemNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/events': {
        post: {
            req: CreateEventApiEventsPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Event;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadEventsApiEventsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': EventsResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/events/{event_name}': {
        get: {
            req: ReadEventApiEventsEventNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Event;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateEventApiEventsEventNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Event;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteEventApiEventsEventNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/feedbacks': {
        post: {
            req: CreateFeedbackApiFeedbacksPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Feedback;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadFeedbacksApiFeedbacksGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': FeedbacksResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/feedbacks/{feedback_id}': {
        get: {
            req: ReadFeedbackApiFeedbacksFeedbackIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Feedback;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateFeedbackApiFeedbacksFeedbackIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Feedback;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteFeedbackApiFeedbacksFeedbackIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/stats': {
        get: {
            req: GetStatsApiStatsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Stats;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/actors': {
        post: {
            req: CreateActorApiNamespacesNamespaceNameActorsPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Actor;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadActorsApiNamespacesNamespaceNameActorsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': ActorsResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/actors/{actor_name}': {
        get: {
            req: ReadActorApiNamespacesNamespaceNameActorsActorNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Actor;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateActorApiNamespacesNamespaceNameActorsActorNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Actor;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteActorApiNamespacesNamespaceNameActorsActorNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/items': {
        post: {
            req: CreateItemApiNamespacesNamespaceNameItemsPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadItemsApiNamespacesNamespaceNameItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': ItemsResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/items/{item_name}': {
        get: {
            req: ReadItemApiNamespacesNamespaceNameItemsItemNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateItemApiNamespacesNamespaceNameItemsItemNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteItemApiNamespacesNamespaceNameItemsItemNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/events': {
        post: {
            req: CreateEventApiNamespacesNamespaceNameEventsPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Event;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadEventsApiNamespacesNamespaceNameEventsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': EventsResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/events/{event_name}': {
        get: {
            req: ReadEventApiNamespacesNamespaceNameEventsEventNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Event;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateEventApiNamespacesNamespaceNameEventsEventNamePutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Event;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteEventApiNamespacesNamespaceNameEventsEventNameDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/feedbacks': {
        post: {
            req: CreateFeedbackApiNamespacesNamespaceNameFeedbacksPostData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Feedback;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        get: {
            req: ReadFeedbacksApiNamespacesNamespaceNameFeedbacksGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': FeedbacksResult;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/feedbacks/{feedback_id}': {
        get: {
            req: ReadFeedbackApiNamespacesNamespaceNameFeedbacksFeedbackIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Feedback;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        put: {
            req: UpdateFeedbackApiNamespacesNamespaceNameFeedbacksFeedbackIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Feedback;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
        delete: {
            req: DeleteFeedbackApiNamespacesNamespaceNameFeedbacksFeedbackIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                '200': unknown;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/stats': {
        get: {
            req: GetStatsApiNamespacesNamespaceNameStatsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Stats;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/reports/average/minmax': {
        get: {
            req: GetMinmaxApiNamespacesNamespaceNameReportsAverageMinmaxGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': MinMax;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/reports/average/item/{item_name}': {
        get: {
            req: GetItemMinmaxApiNamespacesNamespaceNameReportsAverageItemItemNameGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': MinMax;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/reports/average/items': {
        get: {
            req: GetAllItemsMinmaxApiNamespacesNamespaceNameReportsAverageItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<ItemMinMax>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/reports/random/item': {
        get: {
            req: GetRandomItemApiNamespacesNamespaceNameReportsRandomItemGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Item;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/reports/random/items': {
        get: {
            req: GetRandomItemsApiNamespacesNamespaceNameReportsRandomItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<Item>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/reports/most_events/items': {
        get: {
            req: GetItemsWithMostEventsApiNamespacesNamespaceNameReportsMostEventsItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<ItemWithEventCount>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/reports/most_feedback/items': {
        get: {
            req: GetItemsWithMostFeedbackApiNamespacesNamespaceNameReportsMostFeedbackItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<ItemWithFeedbackCount>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/namespaces/{namespace_name}/reports/latest_events/items': {
        get: {
            req: GetItemsWithLatestEventsApiNamespacesNamespaceNameReportsLatestEventsItemsGetData;
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<ItemWithEventDetails>;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
};